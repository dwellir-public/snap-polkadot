#!/bin/sh

BASE_PATH="$SNAP_COMMON/polkadot_base"
SERVICE_ARGS_FILE="$SNAP_COMMON/service-arguments"

# Logs to journalctl. Watch with e.g. journalctl -t SNAP_NAME -f
log()
{
    logger -t ${SNAP_NAME} "$1"
}

set_service_args()
{
    snapctl set service-args="$1"
    set_previous_service_args "$1"
}

get_service_args()
{
    service_args="$(snapctl get service-args)"
    if [ -z "$service_args" ]; then
        log "Setting default service args"
        service_args="--name=$(hostname)"
        set_service_args $service_args
    fi
    echo "$service_args"
}

set_previous_service_args()
{
    snapctl set private.service-args="$1"
}

get_previous_service_args()
{
    snapctl get private.service-args
}

service_args_has_changed()
{
	[ "$(get_service_args)" != "$(get_previous_service_args)" ]
}

validate_service_args()
{
    case "$1" in 
        *base-path*)
            log "base-path is not allowed to pass as a service argument restoring to last used service-args. This path is alywas used instead ${BASE_PATH}."
            # Echo will be visible for a user if the configure hook fails when calling e.g. snap set SNAP_NAME service-args
            echo "base-path is not allowed to pass as a service argument restoring to last used service-args. This path is alywas used instead ${BASE_PATH}."
            set_service_args "$(get_previous_service_args)"
            exit 1
            ;;
        esac
}

handle_service_args_config()
{
    if ! service_args_has_changed; then
        echo "Service args was not changed."
		exit 1
	fi

    service_args="$(get_service_args)"
    validate_service_args "$service_args"
    set_service_args "$service_args"
    log "Writing --base-path=$BASE_PATH and $service_args to $SERVICE_ARGS_FILE"
    echo "--base-path=$BASE_PATH $service_args" > "$SERVICE_ARGS_FILE"
    snapctl restart ${SNAP_NAME}
}

handle_service_args_config
